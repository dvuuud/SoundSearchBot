import os
import yt_dlp
from googleapiclient.discovery import build
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import API_KEY, API_TOKEN
import random
import string
from db import *

create_tables()

youtube = build("youtube", "v3", developerKey=API_KEY)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def generate_referral_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

def search_youtube(query):
    request = youtube.search().list(q=query, part="snippet", type="video", order="relevance")
    response = request.execute()
    if response["items"]:
        video_id = response["items"][0]["id"]["videoId"]
        return f"https://www.youtube.com/watch?v={video_id}"
    return None

def download_audio(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'ffmpeg_location': r'C:\ffmpeg\bin\ffmpeg.exe',
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return f"downloads/{info['title']}.mp3"

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    referral_code = generate_referral_code()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    args = message.get_args()
    referred_by = None
    if args:
        try:
            referred_by = int(args)
        except ValueError:
            pass  

    add_user(user_id, referral_code, referred_by)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è —Å–∫–∞—á–∞—é –µ—ë –¥–ª—è —Ç–µ–±—è.")

@dp.message_handler(commands=['vip'])
async def vip_command(message: types.Message):
    user_id = message.from_user.id
    set_vip_status(user_id, 1)
    await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å—Ç–∞–ª–∏ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

@dp.message_handler(commands=['profile'])
async def profile_command(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)

    if profile is None:
        await message.reply("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
        return

    text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"üÜî ID: `{user_id}`\n"
        f"üåü –°—Ç–∞—Ç—É—Å: {profile['vip_status']}\n"
        f"üë• –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {profile['referrals']}\n"
        f"üéµ –ú—É–∑—ã–∫–∞ —Å–∫–∞—á–∞–Ω–∞: {profile['download_count']} —Ä–∞–∑(–∞)"
    )
    
    await message.reply(text, parse_mode="Markdown")

@dp.message_handler()
async def search_and_download(message: types.Message):
    user_id = message.from_user.id
    query = message.text

    is_vip = get_vip_status(user_id)

    if is_vip:
        video_url = search_youtube(query)
        if video_url:
            file_path = download_audio(video_url)
            increment_download_count(user_id)  
            await message.reply_audio(audio=open(file_path, 'rb'))
            os.remove(file_path)
        else:
            await message.reply("–ù–µ –Ω–∞—à–µ–ª –≤–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    else:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vip")

if __name__ == "__main__":
    os.makedirs("downloads", exist_ok=True)
    executor.start_polling(dp, skip_updates=True)
